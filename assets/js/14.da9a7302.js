(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{437:function(e,n,t){"use strict";t.r(n);var a=t(24),o=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("UCLASS 宏为 UObject 提供一个对 UCLASS 的引用，描述其基于虚幻引擎的类型。每个 UCLASS 保留一个称作“类默认对象（Class Default Object）”的对象，简称 CDO。CDO 本质上是一个默认“模板”对象，由类构建函数生成，之后并未进行修改。UCLASS 和 CDO 均可为特定对象实例恢复，但它们通常为只读。使用 GetClass() 函数即可随时访问对象实例的 UCLASS")]),e._v(" "),t("p",[e._v("UCLASS 包含定义类的一套属性和函数。这些是本地代码可用的普通 C++ 函数和变量，但被虚幻引擎特有的元数据所标记，它们在对象系统中的行为也因此受到控制")]),e._v(" "),t("p",[e._v("需要注意 UObject 类还可包括仅限本地的属性，这些属性不存在于相应的 UCLASS 中")]),e._v(" "),t("p",[e._v("游戏性类\n虚幻引擎中每个游戏类由一个类头文件 .h 和一个类源文件 .cpp 构成。类头包含类和类成员（如变量和函数）的声明，而在类源文件中通过实现属于类的函数来定义类的功能")]),e._v(" "),t("p",[e._v("游戏性类的类头文件使用标准C++语法，并结合专门的宏，以简化类、变量和函数的声明过程")]),e._v(" "),t("p",[e._v('在每个游戏性类头文件的顶端，需要包含生成的头文件(自动创建)，因此在 ClassName.h 的顶端不许出现 #include "ClassName.generated.h"')]),e._v(" "),t("p",[e._v("类声明\n类声明定义类的名称、其继承的类，以及其继承的函数和变量。类声明还将定义通过 类说明符 和 元数据 要求的其他引擎和编辑器特定行为")]),e._v(" "),t("p",[e._v("类声明的语法如下所示")]),e._v(" "),t("div",{staticClass:"language-C++,default line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("UCLASS([specifier, specifier, ...], [meta(key=value, key=value, ...)])\nclass ClassName : public ParentName\n{\n    GENERATED_BODY()\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("声明包含一个类的标准C++类声明。在标准声明之上，描述符(如类说明符合元数据)将被传递到 UCLASS 宏。它们用于创建被声明类的 UClass ，它可被看作引擎对类的专有表达。此外， GENERATED_BODY() 宏必须被放置在类体的最前方")]),e._v(" "),t("p",[e._v("类说明符\n在声明类时，声明上可添加修饰符以控制引擎和编辑器的不同方面的类表现")]),e._v(" "),t("p",[e._v("Abstract\n抽象类说明符将类声明为 “抽象基类”, 防止用户在虚幻编辑器中向世界添加此类的参与者, 或在游戏中创建此类的实例。这对于那些本身没有意义的类很有用。例如, ATriggerBase 基类是抽象的, 而 ATriggerBox 子类别不是抽象的, 您可以在世界上放置一个 ATriggerBox 类的实例, 并且它是有用的, 而 ATriggerBase 的实例本身并不有用")]),e._v(" "),t("p",[e._v("AdvancedClassDisplay\nAdvancedClassDisplay 类说明符强制类的所有属性只显示在 “详细信息” 面板的 “高级” 部分中, 默认情况下隐藏在 “视图” 中。若要在单个属性上重写此项, 请在该属性上使用 SimpleDisplay 说明符")]),e._v(" "),t("p",[e._v("AutoCollapseCategories=(Category1, Category2, …) / DontAutoCollapseCategories=(Category, Category, …)\nAutoCollapseCategories类说明符取消对父类AutoExpandCategories说明符的列出类别的影响\nDontAutoCollapseCategories否定从父类继承的列出类别的AutoCollapseCategories说明符")]),e._v(" "),t("p",[e._v("AutoExpandCategories=(Category1, Category2, …)\n指定应在该类的对象的 “虚幻编辑器” 属性窗口中自动展开的一个或多个类别。若要自动声明为无类别的变量, 请使用声明变量的类的名称")]),e._v(" "),t("p",[e._v("Blueprintable / NotBlueprintable\n将此类公开为创建蓝图的可接受基类。默认是NotBlueprintable，除非继承，否则该说明符由子类继承")]),e._v(" "),t("p",[e._v("BlueprintType\n将此类公开为可用于蓝图中的变量的类型")]),e._v(" "),t("p",[e._v("ClassGroup=GroupName\n表示在Actor浏览器中启用Group View后，虚幻编辑器的Actor浏览器应该在指定的GroupName中包含此类以及此类的任何子类")]),e._v(" "),t("p",[e._v("CollapseCategories / DontCollapseCategories\n表示不应将此类的属性分组到虚幻编辑器属性窗口中的类别中。这个说明符被传播给子类；但是，子类可以使用DontCollapseCategories说明符来覆盖它")]),e._v(" "),t("p",[e._v("Config=ConfigName\n表示允许此类在配置文件 (. ini) 中存储数据。如果有使用 config 或 globalconfig 说明符声明的任何类属性, 则此指定符将导致这些属性存储在命名的配置文件中。此说明符被传播到所有子类, 不能被否定, 但是子类可以通过 re-declaring 配置说明符并提供不同的 ConfigName 来更改配置文件。常见的 ConfigName 值是 “Engine”、”Editor”、”Input” 和 “Game”")]),e._v(" "),t("p",[e._v("Const\n该类中的所有属性和函数都是const的，并以const的形式导出。该说明符由子类继承")]),e._v(" "),t("p",[e._v("ConversionRoot\nRoot转换将一个子类限制为仅能够转换为第一个Root类的子类，并上升到层次结构")]),e._v(" "),t("p",[e._v("CustomConstructor\n阻止自动生成构造函数声明")]),e._v(" "),t("p",[e._v("DefaultToInstanced\n这个类的所有实例都被认为是“实例化”的。实例化的类（组件）在构建时被复制。该说明符由子类继承")]),e._v(" "),t("p",[e._v("DependsOn=(ClassName1, ClassName2, …)\n列出的所有类将在该类之前编译。类必须在同一个 (或上一个) 包中指定一个类。可以使用由逗号分隔的单个取决于行指定多个依赖项类, 也可以为每个类使用单独的取决于行指定。当类使用在另一个类中声明的结构或枚举时, 这一点很重要, 因为编译器只知道它已编译的类中的内容")]),e._v(" "),t("p",[e._v("Deprecated\n这个类不推荐使用，而且这个类的对象在序列化的时候不会被保存。该说明符由子类继承")]),e._v(" "),t("p",[e._v("EditInlineNew / NotEditInlineNew\n表示可以从 “虚幻编辑器” 属性窗口创建此类的对象, 而不是从现有资产引用。默认行为是只有对现有对象的引用才可以通过属性窗口分配。此说明符被传播到所有子类；子类可以使用 NotEditInlineNew 说明符来重写此说明符")]),e._v(" "),t("p",[e._v("HideCategories=(Category1, Category2, …) / ShowCategories=(Category1, Category2, …)")]),e._v(" "),t("p",[e._v("HideCategories列出应隐藏在此类对象的 “虚幻编辑器” 属性窗口中的一个或多个类别。若要隐藏声明为 “no” 类别的属性, 请使用声明该变量的类的名称。此说明符被传播到子类\nShowCategories为所列出的类别取消一个HideCategories说明符（从基类继承）\nHideDropdown\n防止在虚幻编辑器属性窗口组合框中显示此类")]),e._v(" "),t("p",[e._v("HideFunctions=(Category1, Category2, …)/ ShowFunctions=(Category1, Category2, …)")]),e._v(" "),t("p",[e._v("HideFunctions从属性查看器隐藏指定类别中的所有函数\nShowFunctions在属性查看器中显示列出的类别中的所有功能\nHideFunctions=FunctionName**/ ShowFunctions**=FunctionName")]),e._v(" "),t("p",[e._v("HideFunctions隐藏属性查看器中的指定名称的函数\nShowFunctions显示属性查看器中的指定名称的函数\nIntrinsic\n这表明这个类是直接用C ++声明的，并且没有虚幻头文件工具生成的样板文件。不要在新类上使用这个说明符")]),e._v(" "),t("p",[e._v("MinimalAPI\n仅导致要导出的类的类型信息供其他模块使用。类可以被强制转换, 但不能调用类的函数 (内联方法除外)。这提高了编译时间, 因为不为不需要在其他模块中访问所有函数的类导出所有内容")]),e._v(" "),t("p",[e._v("NoExport\n表示此类的声明不应包含在由标头生成器自动生成的 c++ 头文件中。必须在单独的头文件中手动定义 c++ 类声明。仅对本机类有效。不要将此用于新类")]),e._v(" "),t("p",[e._v("Placeable / NotPlaceable\n表示可以在编辑器中创建此类, 并将其置于关卡、UI 场景或蓝图中 (具体取决于类类型)。此标志将传播到所有子类；子类可以使用 NotPlaceable 说明符来重写此标志")]),e._v(" "),t("p",[e._v("Transient / NonTransient\n属于此类的对象将永远不会保存到磁盘。这与某些非永久性的自然类 (如播放器或窗口) 结合使用非常有用。此说明符被传播到子类, 但可以由 NonTransient 说明符重写")]),e._v(" "),t("p",[e._v("Within=OuterClassName\n这个类的对象不能存在于一个OuterClassName对象的实例之外。这意味着创建这个类的Object需要提供一个OuterClassName的实例作为其外部对象")]),e._v(" "),t("p",[e._v("元数据修饰符\n对元数据修饰符的使用按常规类、函数和接口修饰符而不同")]),e._v(" "),t("p",[e._v("BlueprintSpawnableComponent\n如果存在, 组件类可以由蓝图生成")]),e._v(" "),t("p",[e._v("BlueprintThreadSafe\n仅对蓝图函数库有效。此说明符将此类中的函数标记为在动画蓝图中的游戏线程上可调用")]),e._v(" "),t("p",[e._v("ChildCannnotTick / ChildCanTick")]),e._v(" "),t("p",[e._v("ChildCannnotTick用于Actor和Component类。如果本机类不能勾选, 基于此Actor或Component的蓝图生成的类将永远不会勾选, 即使 bCanBlueprintsTickByDefault 为true\nChildCanTick用于Actor和Component类。如果本机类不能勾选, 则基于此参与者或组件的蓝图生成的类可以覆盖 bCanEverTick 标志, 即使 bCanBlueprintsTickByDefault 是 false\nDeprecatedNode\n对于行为树节点, 指示该类已弃用, 并在编译时显示警告")]),e._v(" "),t("p",[e._v("DeprecationMessage=”Message Text”\n如果该类被弃用, 则在尝试编译使用它的蓝图时, 此消息将被添加到标准弃警告中")]),e._v(" "),t("p",[e._v("DisplayName=”Blueprint Node Name”\n蓝图中此节点的名称将替换为此处提供的值, 而不是代码生成的名称")]),e._v(" "),t("p",[e._v("DontUseGenericSpaenObject\n不要在蓝图中使用泛型创建对象节点生成类的对象。此说明符仅对既非参与者也不 ActorComponents 的 BluprintType 类是有意义的")]),e._v(" "),t("p",[e._v("ExposedAsyncProxy\n在异步任务节点中公开此类的代理对象")]),e._v(" "),t("p",[e._v("IgnoreCategoryKeywordsInSubclasses\n用于使类的第一个子类忽略所有继承的 ShowCategories 和 HideCategories 说明符")]),e._v(" "),t("p",[e._v("IsBlueprintBase=”true / false”\n声明此类是 (或不是) 用于创建蓝图的可接受基类, 类似于 UCLASS 说明符、Blueprintable 或 “NotBlueprintable”")]),e._v(" "),t("p",[e._v("KismetHideOverrides=”Event1, Event2, …”\n不允许重写的蓝图事件列表")]),e._v(" "),t("p",[e._v("ProhibitedInterfaces=”Interface1, Interface2, …”\n列出与类不兼容的接口")]),e._v(" "),t("p",[e._v("RestrictedToClasses=”Class1, Class2, …”\n由蓝图函数库类使用, 用于限制列表中命名的类的用法")]),e._v(" "),t("p",[e._v("ShortToolTip\n在某些上下文中使用的简短工具提示, 其中完整的工具提示可能是压倒性的, 如父类选择器对话框")]),e._v(" "),t("p",[e._v("ToolTip\n重写代码注释中自动生成的工具提示")]),e._v(" "),t("p",[e._v("ShowWorldContextPin\n表示放置在此类所拥有的关系图中的蓝图节点必须显示它们的世界上下文针脚, 即使它们通常是隐藏的, 因为此类的对象不能用作世界上下文")]),e._v(" "),t("p",[e._v("UsesHierarchy\n表示类使用分层数据。用于实例化详细信息面板中的分层编辑功能\n————————————————\n版权声明：本文为CSDN博主「303snowing」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/u012793104/article/details/78547655")])])}),[],!1,null,null,null);n.default=o.exports}}]);